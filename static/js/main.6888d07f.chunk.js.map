{"version":3,"sources":["theme.js","web3/reducer.js","web3/index.js","components/Prices.js","components/Graph.js","formatter.js","components/PriceChart.js","App.js","reportWebVitals.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","Web3Reducer","state","action","type","account","payload","provider","initialState","loading","web3Modal","Web3Modal","providerOptions","Web3Context","createContext","Web3Provider","children","useReducer","dispatch","setAccount","setProvider","connectWeb3","useCallback","a","connect","ethersProvider","ethers","providers","window","web3","getSigner","signer","getAddress","on","location","reload","useEffect","Provider","value","logout","localStorage","setItem","Prices","useState","coins","setCoins","fetch","then","res","json","data","catch","err","console","error","formatDollar","number","maximumSignificantDigits","Intl","NumberFormat","style","currency","format","useMediaQuery","isNotSmallerScreen","overflowX","variant","colorScheme","map","coin","symbol","toUpperCase","src","image","width","height","marginRight","className","price_change_percentage_24h","num","Number","toFixed","current_price","market_cap","id","Graph","price","flexDirection","alignItems","options","tooltips","intersect","mode","responsive","maintainAspectRatio","formatData","finalData","labels","datasets","label","backgroundColor","borderColor","fill","dates","val","ts","date","Date","day","getDate","month","getMonth","year","getFullYear","priceArr","reverse","PriceChart","props","currencies","setCurrencies","pair","setPair","setPrice","pastData","setPastData","ws","useRef","first","url","current","WebSocket","pairs","filtered","filter","quote_currency","sort","b","base_currency","apiCall","msg","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","dataArr","formattedData","fetchHistoricalData","onmessage","e","parse","product_id","name","onChange","unSubMsg","unSub","target","placeholder","cur","idx","display_name","App","useContext","useColorMode","colorMode","toggleColorMode","isDark","p","w","justifyContent","direction","ml","size","fontWeight","color","href","isExternal","ExternalLink","mx","my","icon","isRound","onClick","borderRadius","opacity","mt","bg","borderWidth","overflow","py","px","border","ArrowUpDown","flex","textAlign","pb","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6888d07f.chunk.js","sourcesContent":["// theme.js\n\n// 1. import `extendTheme` function\nimport { extendTheme } from \"@chakra-ui/react\"\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme","export const Web3Reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload,\n      };\n    case \"SET_PROVIDER\":\n      return {\n        ...state,\n        provider: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { createContext, useCallback, useReducer, useEffect } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { ethers } from \"ethers\";\n\nimport { Web3Reducer } from \"./reducer\";\n\nconst initialState = {\n  loading: false,\n  account: null,\n  provider: null,\n};\n\nconst providerOptions = {};\n\nconst web3Modal = new Web3Modal({\n  providerOptions: providerOptions,\n});\n\nexport const Web3Context = createContext(initialState);\n\nexport const Web3Provider = ({ children }) => {\n  const [state, dispatch] = useReducer(Web3Reducer, initialState);\n\n  const setAccount = (account) => {\n    dispatch({\n      type: \"SET_ACCOUNT\",\n      payload: account,\n    });\n  };\n\n  const setProvider = (provider) => {\n    dispatch({\n      type: \"SET_PROVIDER\",\n      payload: provider,\n    });\n  };\n\n  const logout = () => {\n    setAccount(null);\n    setProvider(null);\n    localStorage.setItem(\"defaultWallet\", null);\n  };\n\n  const connectWeb3 = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    const ethersProvider = new ethers.providers.Web3Provider(provider);\n    window.web3 = ethersProvider;\n\n    setProvider(ethersProvider);\n\n    const signer = await ethersProvider.getSigner();\n    let account = await signer.getAddress();\n    setAccount(account);\n\n    provider.on(\"chainChanged\", () => {\n      window.location.reload();\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      window.location.reload();\n    });\n  }, []);\n\n  useEffect(() => {}, []);\n\n  return (\n    <Web3Context.Provider\n      value={{\n        ...state,\n        connectWeb3,\n        logout,\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tfoot,\n    Tr,\n    Th,\n    Td,\n    TableCaption,\n    Image,\n    Box\n  } from \"@chakra-ui/react\";\n  import { useMediaQuery } from \"@chakra-ui/react\";\n\n  import './Prices.css'\n\n\nconst Prices = () => {\n    const [coins, setCoins] = useState([]);\n    \n    const url = \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false\";\n\n    useEffect(() => {\n        fetch(url)\n           .then(res => res.json())\n           .then(data => setCoins(data)) //console.log(data);\n           .catch(err => console.error(err));\n    }, []);\n\n    const formatPercent = num => `${new Number(num).toFixed(2)}%`;\n\n  const formatDollar = (number, maximumSignificantDigits) => \n      new Intl.NumberFormat('en-Us', {\n        style: 'currency',\n        currency: 'usd',\n        maximumSignificantDigits\n      }).format(number);\n\n      const [isNotSmallerScreen] = useMediaQuery(\"(min-width:600px)\");\n\n    return (\n        <Box overflowX=\"scroll\">\n        <Table variant=\"striped\" colorScheme=\"teal\">\n            <TableCaption>Prices</TableCaption>\n            <Thead>\n                <Tr>\n                    <Th>Symbol</Th>\n                    <Th></Th>\n                    <Th>24Hour Change</Th>\n                    <Th>Price</Th>\n                    <Th>Market Cap</Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                {coins.map(coin => (\n                    <Tr key={coin.id}>\n                        <Td>{coin.symbol.toUpperCase()}</Td>\n                        <Td><Image  src={coin.image} style={{width: 25, height: 25, marginRight: isNotSmallerScreen ? 20 : 25}}/></Td>\n                        <Td>\n                            <span\n                                className={coin.price_change_percentage_24h > 0 ? (\n                                    'text-success'\n                                    ) : 'text-danger'}\n                                >\n                                {formatPercent(coin.price_change_percentage_24h)}\n                            </span>\n                        </Td>\n                        <Td>{formatDollar(coin.current_price, 20)}</Td>\n                        <Td>{formatDollar(coin.market_cap, 12)}</Td>\n                    </Tr>\n                ))}\n            </Tbody>\n        </Table>\n        </Box>\n    );\n};\n\nexport default Prices;","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Box, Flex, useMediaQuery } from \"@chakra-ui/react\";\n\nconst Graph = ({ price, data }) => {\n    const [isNotSmallerScreen] = useMediaQuery(\"(min-width:600px)\");\n\n    const opts = {\n        tooltips: {\n            intersect: false,\n            mode: \"index\"\n        },\n        responsive: true,\n        maintainAspectRatio: false\n    };\n\n    if(price === \"0.00\"){\n        return <h2>Please select a currency pair</h2>\n    }\n\n    return(\n        <Flex \n            flexDirection=\"column\" \n            alignItems=\"center\"\n            width=\"100%\"\n            height=\"80vh\"\n        >\n            <h2>{`$${price}`}</h2>\n\n            <Box width={isNotSmallerScreen ? \"80%\" : \"100%\"} height=\"100%\">\n                <Line data={data} options={opts} />\n            </Box>\n        </Flex>\n    )\n};\n\nexport default Graph;","export const formatData = data => {\n    let finalData = {\n        labels: [],\n        datasets: [\n            {\n                label: \"price\",\n                data: [],\n                backgroundColor: \"rgb(255, 99, 132, 0.8)\",\n                borderColor: \"rgba(255, 99, 132, 0.2)\",\n                fill: false\n            }\n        ]\n    };\n\n    let dates = data.map(val => {\n        const ts = val[0];\n        let date = new Date(ts * 1000);\n        let day = date.getDate();\n        let month = date.getMonth() + 1;\n        let year = date.getFullYear();\n\n        let final = `${day}-${month}-${year}`;\n        return final;\n    });\n\n    let priceArr = data.map(val => {\n        return val[4];\n    });\n\n    priceArr.reverse();\n    dates.reverse();\n    finalData.labels = dates;\n    finalData.datasets[0].data = priceArr;\n\n    return finalData;\n}","import React, { useState, useRef, useEffect } from 'react';\nimport Graph from './Graph';\nimport { formatData } from '../formatter';\nimport { Select, Flex, Spacer } from \"@chakra-ui/react\"\n\nconst PriceChart = props => {\n    const [currencies, setCurrencies] = useState([]);\n    const [pair, setPair] = useState(\"\");\n    const [price, setPrice] = useState(\"0.00\");\n    const [pastData, setPastData] = useState({});\n    const ws = useRef(null);\n\n    let first = useRef(false);\n    const url = \"https://api.pro.coinbase.com\";\n\n    useEffect(() => {\n        ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    \n        let pairs = [];\n    \n        const apiCall = async () => {\n          await fetch(url + \"/products\")\n              .then(res => res.json())\n              .then(data => pairs = data);\n    \n              let filtered = pairs.filter(pair => {\n                if(pair.quote_currency === \"USD\"){\n                  return pair;\n                }\n              });\n    \n              filtered = filtered.sort((a,b) => {\n                if(a.base_currency < b.base_currency){\n                  return -1;\n                }\n    \n                if(a.base_currency > b.base_currency){\n                  return 1;\n                }\n    \n                return 0;\n              });\n    \n              setCurrencies(filtered);\n    \n              first.current = true;\n        }\n    \n        apiCall();\n    \n      }, []);\n\n      useEffect(() => {\n        if(!first.current){\n          return;\n        }\n    \n        let msg = {\n          type: \"subscribe\",\n          product_ids: [pair],\n          channels: [\"ticker\"]\n        }\n    \n        let jsonMsg = JSON.stringify(msg);\n        ws.current.send(jsonMsg);\n    \n        let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n    \n        const fetchHistoricalData = async () => {\n          let dataArr = [];\n    \n          await fetch(historicalDataURL)\n              .then(res => res.json())\n              .then(data => (dataArr = data));\n    \n              let formattedData = formatData(dataArr);\n    \n              setPastData(formattedData);\n        };\n    \n        fetchHistoricalData();\n    \n        ws.current.onmessage = e => {\n          let data = JSON.parse(e.data);\n          if(data.type !== \"ticker\"){\n            return;\n          }\n    \n          if(data.product_id === pair){\n            setPrice(data.price)\n          }\n        };\n    \n      }, [pair]);\n\n      const handleSelect = e => {\n        let unSubMsg = {\n          type: \"unsubscribe\",\n          product_ids: [pair],\n          channels: [\"ticker\"]\n        }\n    \n        let unSub = JSON.stringify(unSubMsg);\n    \n        ws.current.send(unSub);\n    \n        setPair(e.target.value);\n      }\n\n    return (\n        <Flex \n            flexDirection=\"column\" \n            alignItems=\"center\"\n            width=\"100%\"\n            height=\"100vh\"\n        >\n            {\n                <Select \n                    name=\"currency\" \n                    value={pair} \n                    onChange={handleSelect} \n                    variant=\"filled\" \n                    placeholder=\"Select a Pair\"\n                >\n                {currencies.map((cur, idx) => {\n                    return(\n                    <option key={idx} value={cur.id}>\n                        {cur.display_name}\n                    </option>\n                    )\n                })}\n                </Select>\n            }\n\n            <Spacer></Spacer>\n\n            <Graph data={pastData} price={price} />\n        </Flex>\n    );\n};\n\nexport default PriceChart;","import React, { useContext } from \"react\";\nimport { Web3Context } from \"./web3\";\nimport { IconButton } from \"@chakra-ui/button\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { Flex, VStack, Heading, Spacer } from \"@chakra-ui/layout\";\nimport { FaSun, FaMoon } from 'react-icons/fa';\nimport { ArrowUpDownIcon, ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { useMediaQuery } from \"@chakra-ui/react\";\nimport { \n  Box, \n  Button,\n  Image, \n  Input,\n  InputGroup, \n  InputLeftAddon,\n  Link,\n  Center,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n} from \"@chakra-ui/react\";\nimport Prices from './components/Prices';\nimport PriceChart from \"./components/PriceChart\";\nimport \"./App.css\";\n\nfunction App() {\n  const { account, connectWeb3, logout } = useContext(Web3Context);\n\n  const { colorMode, toggleColorMode } = useColorMode();\n  const isDark = colorMode === \"dark\";\n  const [isNotSmallerScreen] = useMediaQuery(\"(min-width:600px)\");\n\n  return (\n    <VStack p={3}>\n      <Flex \n          w=\"100%\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          direction={isNotSmallerScreen ? \"row\" : \"column\"}\n      >\n        <Heading ml={isNotSmallerScreen ? \"5\" : \"0\"} size=\"md\" fontWeight='semibold' color=\"cyan.400\">swapUI</Heading>\n\n        <Spacer></Spacer>\n\n        <Button\n          colorScheme=\"teal\"\n          size=\"sm\"\n          variant=\"ghost\"\n        >\n          Get SimUSD\n        </Button>\n        <Link href=\"https://faucet.rinkeby.io/\" isExternal>\n          Rinkeby <ExternalLinkIcon mx=\"2px\" />\n        </Link>\n\n        <Button \n            ml={isNotSmallerScreen ? \"4\" : \"0\"}\n            my={isNotSmallerScreen ? \"0\" : \"2\"} \n            colorScheme=\"teal\" \n            size={isNotSmallerScreen ? \"md\" : \"sm\"}\n        >\n          Connect to a wallet\n        </Button>\n        \n        <IconButton \n            ml={isNotSmallerScreen ? \"6\" : \"0\"} \n            icon={isDark ? <FaSun /> : <FaMoon />}\n            isRound='true' \n            onClick={toggleColorMode}\n        ></IconButton>\n      </Flex>\n\n      <Spacer></Spacer>\n\n      <Center width=\"100%\">\n        <Flex \n          flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          width=\"100%\"\n        >\n          <Flex \n              size={isNotSmallerScreen ? \"md\" : \"sm\"}\n              borderRadius=\"lg\"\n              flexDirection={isNotSmallerScreen ? \"row\" : \"column\"}\n          >\n            <Button size={isNotSmallerScreen ? \"md\" : \"sm\"}>\n              ETH Balance\n            </Button>\n            <Button opacity=\"0.5\" size={isNotSmallerScreen ? \"md\" : \"sm\"}>\n              SimETH Balance\n            </Button>\n            <Button opacity=\"0.5\" size={isNotSmallerScreen ? \"md\" : \"sm\"}>\n              SimUSD Balance\n            </Button>\n          </Flex>\n\n          <Spacer></Spacer>\n\n          <Box \n              mt={isNotSmallerScreen ? \"10\" : \"5\"} \n              width={isNotSmallerScreen ? \"60%\" : \"98%\"} \n              p={isNotSmallerScreen ? \"5\" : \"3\"} \n              bg=\"#161522\" \n              borderWidth=\"1px\" \n              borderRadius=\"md\" \n              overflow=\"hidden\"\n          >\n            <Button colorScheme=\"cyan\" size={isNotSmallerScreen ? \"md\" : \"sm\"}>Swap</Button>\n            \n            <Box \n                mt={isNotSmallerScreen ? \"5\" : \"2\"} \n                py={isNotSmallerScreen ? \"8\" : \"4\"} \n                px={isNotSmallerScreen ? \"5\" : \"2.5\"} \n                bg=\"#202231\" \n                border=\"none\" \n                borderRadius=\"md\"\n            >\n              <InputGroup size={isNotSmallerScreen ? \"md\" : \"sm\"}>\n                <InputLeftAddon p={isNotSmallerScreen ? \"3\" : \"2\"} children=\"simETH\" />\n                <Input \n                    p={isNotSmallerScreen ? \"5\" : \"2\"} \n                    type=\"number\" \n                    bg=\"#161522\" \n                    color=\"white\" \n                    border=\"none\" \n                    placeholder=\"0.00\" \n                />\n              </InputGroup>\n            </Box>\n\n            <Center>\n              <IconButton \n                  icon={<ArrowUpDownIcon />} \n                  borderWidth=\"1px\" \n                  borderRadius=\"sm\" \n              />\n            </Center>\n\n            <Box \n                py={isNotSmallerScreen ? \"8\" : \"4\"} \n                px={isNotSmallerScreen ? \"5\" : \"2.5\"} \n                bg=\"#202231\" \n                border=\"none\" \n                borderRadius=\"md\"\n            >\n              <InputGroup size={isNotSmallerScreen ? \"md\" : \"sm\"}>\n                <InputLeftAddon p={isNotSmallerScreen ? \"3\" : \"2\"} children=\"simUSD\" />\n                <Input\n                    p={isNotSmallerScreen ? \"5\" : \"2\"} \n                    type=\"number\" \n                    bg=\"#161522\" \n                    color=\"white\" \n                    border=\"none\" \n                    placeholder=\"0.00\"\n                />\n              </InputGroup>\n            </Box>\n\n            <Button \n                mt={2} \n                colorScheme=\"teal\" \n                size={isNotSmallerScreen ? \"md\" : \"sm\"}\n            >\n              Connect to a wallet\n            </Button>\n          </Box>\n\n          <Spacer></Spacer>\n\n          <Accordion \n              mt={isNotSmallerScreen ? \"5\" : \"3\"} \n              width={isNotSmallerScreen ? \"75%\" : \"100%\"}\n          >\n            <AccordionItem>\n              <h2>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    ETH/USD Prices\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n              </h2>\n              <AccordionPanel pb={4}>\n                <Prices />\n              </AccordionPanel>\n            </AccordionItem>\n\n            <AccordionItem>\n              <h2>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    Price Graph\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n              </h2>\n              <AccordionPanel pb={4}>\n                <PriceChart />\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Flex>\n      </Center>\n    </VStack>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport theme from './theme';\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Web3Provider } from \"./web3\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <Web3Provider>\n        <App />\n      </Web3Provider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}